pipeline {
    agent {
        node {
            label 'maven-slaves'
        }
    }
    
    environment {
        PATH = "/opt/apache-maven-3.9.2/bin:$PATH"
        JAVA_HOME = tool 'java8'  // Make sure this matches your Jenkins tool name
        scannerHome = tool 'jkhan-sonarqube-scanner'
        MAVEN_OPTS = '-Xmx2048m'
    }

    stages {
        stage('Build') {
            steps {
                dir('tweet_java_app') {
                    sh '''
                        echo "=== Java Version ==="
                        java -version
                        echo "=== Maven Version ==="
                        mvn -v
                        
                        echo "=== Building Java Application ==="
                        mvn clean install \
                            -Dmaven.test.skip=true \
                            -B \
                            -V
                    '''
                }
            }
        }

        stage('Unit Test') {
            steps {
                dir('tweet_java_app') {
                    sh '''
                        echo "=== Running Unit Tests ==="
                        export MAVEN_OPTS="-Xmx1024m"
                        mvn test \
                            -Dsurefire.useSystemClassLoader=false \
                            -Djava.security.egd=file:/dev/./urandom \
                            -B
                    '''
                }
            }
            post {
                always {
                    junit(
                        allowEmptyResults: true,
                        testResults: 'tweet_java_app/target/surefire-reports/*.xml'
                    )
                }
            }
        }

        stage("Sonar Analysis") {
            steps {
                dir('tweet_java_app') {
                    withSonarQubeEnv('valaxy-sonarqube-server') {
                        sh '''
                            echo "=== Running SonarQube Analysis ==="
                            ${scannerHome}/bin/sonar-scanner
                        '''
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            echo '=== Cleaning Workspace ==='
            cleanWs()
        }
        success {
            echo '=== Pipeline Succeeded ==='
        }
        failure {
            echo '=== Pipeline Failed ==='
            script {
                if (fileExists('tweet_java_app/target/surefire-reports')) {
                    echo '=== Test Failure Details ==='
                    sh 'cat tweet_java_app/target/surefire-reports/*.txt || true'
                }
            }
        }
    }
}
